// Generated by CoffeeScript 1.3.3
(function() {
  var Bloom, Garden, Helper, Petal, Vector, main, root, test;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.canvas = $("#canvas")[0];

  root.canvas.width = root.innerWidth;

  root.canvas.height = root.innerHeight;

  root.ctx = root.canvas.getContext("2d");

  Helper = (function() {

    function Helper() {}

    Helper.random = function(min, max) {
      return Math.random() * (max - min) + min;
    };

    Helper.randomInt = function(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    };

    Helper.rgba = function(r, g, b, a) {
      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    };

    Helper.randomrgba = function(min, max, a) {
      return Helper.rgba(Math.round(Helper.random(min, max)), Math.round(Helper.random(min, max)), Math.round(Helper.random(min, max)), a);
    };

    Helper.deg2rad = function(deg) {
      return Math.PI / 180 * deg;
    };

    Helper.rad2deg = function(rad) {
      return rad / Math.PI * 180;
    };

    Helper.previewColor = "rgba(127,127,127,0.4)";

    Helper.minBloomRadius = 5;

    Helper.maxBloomRadius = 20;

    Helper.minPetalStretch = 0.1;

    Helper.maxPetalStretch = 3;

    Helper.minPetalCount = 5;

    Helper.maxPetalCount = 15;

    Helper.minGrowFactor = 0.1;

    Helper.maxGrowFactor = 1;

    Helper.minColor = 0;

    Helper.maxColor = 255;

    Helper.opacity = 0.5;

    Helper.density = 10;

    Helper.growSpeed = 166;

    Helper.tanAngle = 90;

    return Helper;

  })();

  Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.rotate = function(theta) {
      var x, y;
      x = this.x;
      y = this.y;
      this.x = Math.cos(theta) * x - Math.sin(theta) * y;
      this.y = Math.sin(theta) * x + Math.cos(theta) * y;
      return this;
    };

    Vector.prototype.mult = function(f) {
      this.x *= f;
      this.y *= f;
      return this;
    };

    Vector.prototype.clone = function() {
      return new Vector(this.x, this.y);
    };

    Vector.prototype.length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.subtract = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    };

    Vector.prototype.set = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    return Vector;

  })();

  Petal = (function() {

    function Petal(stretchA, stretchB, startAngle, angle, growFactor, bloom) {
      this.stretchA = stretchA;
      this.stretchB = stretchB;
      this.startAngle = startAngle;
      this.angle = angle;
      this.bloom = bloom;
      this.growFactor = growFactor;
      this.r = 1;
      this.isFinished = false;
    }

    Petal.prototype.draw = function() {
      var v1, v2, v3, v4;
      v1 = new Vector(0, this.r).rotate(Helper.deg2rad(this.startAngle));
      v2 = v1.clone().rotate(Helper.deg2rad(this.angle));
      v3 = v1.clone().mult(this.stretChA);
      v4 = v2.clone().mult(this.stretchB);
      console.log(root.ctx);
      root.ctx.beginPath();
      root.ctx.moveTo(v1.x, v1.y);
      root.ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);
      root.ctx.closePath();
      root.ctx.stroke();
    };

    Petal.prototype.render = function() {
      if (this.r <= this.bloom.r) {
        this.r += this.growFactor;
        this.draw();
      } else {
        this.isFinished = true;
      }
    };

    return Petal;

  })();

  Bloom = (function() {

    function Bloom(p, r, c, pc, garden) {
      this.p = p;
      this.r = r;
      this.c = c;
      this.pc = pc;
      this.garden = garden;
      this.petals = [];
      this.init();
      this.garden.blooms.push(this);
    }

    Bloom.prototype.draw = function() {
      var isFinished, petal, _i, _len, _ref;
      isFinished = true;
      root.ctx.save();
      root.ctx.translate(this.p.x, this.p.y);
      _ref = this.petals;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        petal = _ref[_i];
        petal.render();
        isFinished = petal.isFinished && isFinished;
      }
      if (isFinished) {
        this.garden.removeBloom(this);
      }
      root.ctx.restore();
    };

    Bloom.prototype.init = function() {
      var angle, i, p, startAngle, _i, _ref, _results;
      angle = 360.0 / this.pc;
      startAngle = Helper.randomInt(0, 90);
      _results = [];
      for (i = _i = 0, _ref = this.pc; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        p = new Petal(Helper.random(Helper.minPetalStretch, Helper.maxPetalStretch), Helper.random(Helper.minPetalStretch, Helper.maxPetalStretch), startAngle + i * angle, angle, Helper.random(Helper.minGrowFactor, Helper.maxGrowFactor), this);
        _results.push(this.petals.push(p));
      }
      return _results;
    };

    return Bloom;

  })();

  Garden = (function() {

    function Garden() {
      this.ctx = root.ctx;
      this.blooms = [];
    }

    Garden.prototype.addBloom = function(b) {
      return this.blooms.push(b);
    };

    Garden.prototype.removeBloom = function(b) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.blooms.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (b === this.blooms[i]) {
          this.blooms.splice(i, 1);
          return this;
        }
      }
    };

    Garden.prototype.render = function() {
      var bloom, _i, _len, _ref;
      _ref = this.blooms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bloom = _ref[_i];
        bloom.draw();
      }
    };

    Garden.prototype.clear = function() {
      this.blooms = [];
      this.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
    };

    Garden.prototype.createBloom = function(x, y, r, c, pc) {
      return new Bloom(new Vector(x, y), r, c, pc, this);
    };

    Garden.prototype.createRandomBloom = function(x, y) {
      return this.createBloom(x, y, Helper.randomInt(Helper.minBloomRadius, Helper.maxBloomRadius), Helper.randomrgba(Helper.minColor, Helper.maxColor, Helper.opacity), Helper.randomInt(Helper.minPetalCount, Helper.maxPetalCount));
    };

    return Garden;

  })();

  main = function() {
    var g;
    g = new Garden();
    g.createRandomBloom(100, 100);
    console.log(g);
    g.render();
  };

  test = function() {
    var p;
    p = new Petal(3, 0.5, 0, 45, 1, null);
    root.ctx.save();
    root.ctx.translate(100, 100);
    p.draw();
    root.ctx.restore();
  };

  test();

}).call(this);
