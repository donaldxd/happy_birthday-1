// Generated by CoffeeScript 1.3.3
(function() {
  var Flower, Leaf, Vector, growth, nleaf, radius, randColor, randInt, random, root, showRandomFlowers, stretch;

  root = typeof window !== "undefined" && window !== null ? window : global;

  root.canvas = $("#canvas")[0];

  root.ctx = root.canvas.getContext("2d");

  root.canvas.width = root.innerWidth;

  root.canvas.height = root.innerHeight - 20;

  stretch = {
    min: 0.3,
    max: 10.0
  };

  radius = {
    min: 3,
    max: 10
  };

  nleaf = {
    min: 3,
    max: 8
  };

  growth = {
    min: 0.1,
    max: 2.0
  };

  random = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return Math.random() * (max - min) + min;
  };

  randInt = function(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  };

  randColor = function() {
    var a, b, g, r;
    r = randInt(1, 256);
    g = randInt(1, 256);
    b = randInt(1, 256);
    a = random();
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.mult = function(f) {
      this.x *= f;
      this.y *= f;
      return this;
    };

    Vector.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vector.prototype.rotate = function(theta) {
      var x, y;
      x = this.x;
      y = this.y;
      theta *= Math.PI / 180;
      this.x = x * Math.cos(theta) - y * Math.sin(theta);
      this.y = x * Math.sin(theta) + y * Math.cos(theta);
      return this;
    };

    Vector.prototype.set = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    Vector.prototype.clone = function() {
      return new Vector(this.x, this.y);
    };

    return Vector;

  })();

  Leaf = (function() {

    function Leaf(s1, s2, startAngle, angle, growth, flower) {
      this.s1 = s1;
      this.s2 = s2;
      this.startAngle = startAngle;
      this.angle = angle;
      this.r = 1;
      this.growth = growth;
      this.flower = flower;
      this.ctx = root.ctx;
      this.finished = false;
      this.flower.addLeaf(this);
      this.color = randColor();
    }

    Leaf.prototype.draw = function() {
      var v1, v2, v3, v4;
      v1 = new Vector(this.r, 0).rotate(this.startAngle);
      v2 = v1.clone().rotate(this.angle);
      v3 = v1.clone().mult(this.s1);
      v4 = v2.clone().mult(this.s2);
      this.ctx.save();
      this.ctx.translate(this.flower.center.x, this.flower.center.y);
      this.ctx.strokeStyle = this.color;
      this.ctx.beginPath();
      this.ctx.moveTo(v1.x, v1.y);
      this.ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);
      this.ctx.closePath();
      this.ctx.stroke();
      this.ctx.restore();
    };

    Leaf.prototype.render = function() {
      var r;
      r = this.r;
      while (this.r <= this.flower.r) {
        this.draw();
        this.r += this.growth;
      }
      this.finished = true;
      this.r = r;
    };

    return Leaf;

  })();

  Flower = (function() {

    function Flower(center, r, nLeaf) {
      if (r == null) {
        r = 10;
      }
      if (nLeaf == null) {
        nLeaf = 4;
      }
      this.center = center;
      this.r = r;
      this.nLeaf = nLeaf;
      this.leaves = [];
      this.finished = false;
      this.init();
    }

    Flower.prototype.addLeaf = function(leaf) {
      return this.leaves.push(leaf);
    };

    Flower.prototype.init = function() {
      var angle, i, leaf, startAngle, _i, _ref;
      startAngle = randInt(0, 360);
      angle = 360.0 / this.nLeaf;
      for (i = _i = 0, _ref = this.nLeaf; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        leaf = new Leaf(random(stretch.min, stretch.max), random(stretch.min, stretch.max), startAngle, angle, random(growth.min, growth.max), this);
        startAngle += angle;
      }
      this.initialized = true;
    };

    Flower.prototype.render = function() {
      var leaf, _i, _len, _ref, _results;
      _ref = this.leaves;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leaf = _ref[_i];
        _results.push(leaf.render());
      }
      return _results;
    };

    return Flower;

  })();

  showRandomFlowers = function(n) {
    var f, i, maxHeight, maxWidth, minHeight, minWidth, p, _i;
    minWidth = 100;
    maxWidth = Math.floor(root.canvas.width) - minWidth;
    minHeight = 100;
    maxHeight = Math.floor(root.canvas.height) - minHeight;
    for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
      p = new Vector(randInt(minWidth, maxWidth), randInt(minHeight, maxHeight));
      f = new Flower(p, randInt(radius.min, radius.max), randInt(nleaf.min, nleaf.max));
      f.render();
    }
  };

  $("button#btn-start").click(function() {
    return showRandomFlowers(100);
  });

  $("button#btn-stop").click(function() {
    return root.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
  });

}).call(this);
