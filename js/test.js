// Generated by CoffeeScript 1.3.3
(function() {
  var Flower, Leaf, Vector, clearCanvas, commonColor, createData, getColor, growth, main, modifyData, nleaf, radius, randColor, randInt, random, root, showBoard, showCake, showLetter, showMessage, showRandomFlowers, step0, step1, step2, step3, step4, step5, step6, step7, stretch, writeLetter;

  root = typeof window !== "undefined" && window !== null ? window : global;

  root.canvas = $("#canvas")[0];

  root.ctx = root.canvas.getContext("2d");

  root.canvas.width = root.innerWidth;

  root.canvas.height = root.innerHeight - 50;

  root.btn = $("#btn")[0];

  root.modified = false;

  root.needAnimation = false;

  root.R = Math.min(root.innerWidth, root.innerHeight) * 0.45;

  stretch = {
    min: 0.3,
    max: 10.0
  };

  radius = {
    min: 3,
    max: 5
  };

  nleaf = {
    min: 3,
    max: 10
  };

  growth = {
    min: 0.1,
    max: 0.3
  };

  clearCanvas = function() {
    return root.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
  };

  random = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return Math.random() * (max - min) + min;
  };

  randInt = function(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  };

  randColor = function() {
    var a, b, g, r;
    r = randInt(0, 255);
    g = randInt(0, 255);
    b = randInt(0, 255);
    a = random();
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  getColor = function(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  commonColor = {
    red: "rgb(255,0,0)",
    green: "rgb(0,255,0)",
    blue: "rgb(0,0,255)",
    black: "rgb(0,0,0)",
    white: "rgb(255,255,255)",
    yellow: "rgb(255,255,0)",
    purple: "rgb(255,0,255)",
    deepPink: "rgb(255,20,147)",
    saddleBrown: "rgb(139,69,19)",
    darkGreen: "rgb(34,139,34)",
    mintCream: "rgb(245,255,250)",
    chocolate: "rgb(210,105,30)"
  };

  Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.mult = function(f) {
      this.x *= f;
      this.y *= f;
      return this;
    };

    Vector.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vector.prototype.rotate = function(theta) {
      var x, y;
      x = this.x;
      y = this.y;
      theta *= Math.PI / 180;
      this.x = x * Math.cos(theta) - y * Math.sin(theta);
      this.y = x * Math.sin(theta) + y * Math.cos(theta);
      return this;
    };

    Vector.prototype.set = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    Vector.prototype.clone = function() {
      return new Vector(this.x, this.y);
    };

    Vector.prototype.fillCircle = function(r, color) {
      if (r == null) {
        r = 10;
      }
      if (color == null) {
        color = commonColor.red;
      }
      root.ctx.save();
      root.ctx.translate(this.x, this.y);
      root.ctx.beginPath();
      root.ctx.arc(0, 0, r, 0, Math.PI * 2, true);
      root.ctx.closePath();
      root.ctx.fillStyle = color;
      root.ctx.fill();
      root.ctx.restore();
    };

    Vector.prototype.getHeartCurvePoint = function(r, theta) {
      var x, y;
      if (theta == null) {
        theta = 0;
      }
      theta = Math.PI / 180 * theta;
      x = this.x + r * 16 * Math.pow(Math.sin(theta), 3);
      y = this.y - r * (13 * Math.cos(theta) - 5 * Math.cos(2 * theta) - 2 * Math.cos(3 * theta) - Math.cos(4 * theta));
      return new Vector(x, y);
    };

    Vector.prototype.fillDiamond = function(r, color) {
      if (color == null) {
        color = commonColor.yellow;
      }
      root.ctx.save();
      root.ctx.translate(this.x, this.y);
      root.ctx.beginPath();
      root.ctx.moveTo(-r, 0);
      root.ctx.lineTo(0, -r);
      root.ctx.lineTo(r, 0);
      root.ctx.lineTo(0, r);
      root.ctx.closePath();
      root.ctx.fillStyle = color;
      root.ctx.fill();
      root.ctx.restore();
    };

    return Vector;

  })();

  Leaf = (function() {

    function Leaf(s1, s2, startAngle, angle, growth, flower) {
      this.s1 = s1;
      this.s2 = s2;
      this.startAngle = startAngle;
      this.angle = angle;
      this.r = 1;
      this.growth = growth;
      this.flower = flower;
      this.ctx = root.ctx;
      this.finished = false;
      this.flower.addLeaf(this);
      this.color = randColor();
    }

    Leaf.prototype.draw = function() {
      var v1, v2, v3, v4;
      v1 = new Vector(this.r, 0).rotate(this.startAngle);
      v2 = v1.clone().rotate(this.angle);
      v3 = v1.clone().mult(this.s1);
      v4 = v2.clone().mult(this.s2);
      this.ctx.save();
      this.ctx.translate(this.flower.center.x, this.flower.center.y);
      this.ctx.strokeStyle = this.color;
      this.ctx.beginPath();
      this.ctx.moveTo(v1.x, v1.y);
      this.ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);
      this.ctx.closePath();
      this.ctx.stroke();
      this.ctx.restore();
    };

    Leaf.prototype.render = function() {
      var r;
      r = this.r;
      while (this.r <= this.flower.r) {
        this.draw();
        this.r += this.growth;
      }
      this.finished = true;
      this.r = r;
    };

    return Leaf;

  })();

  Flower = (function() {

    function Flower(center, r, nLeaf) {
      if (r == null) {
        r = 10;
      }
      if (nLeaf == null) {
        nLeaf = 4;
      }
      this.center = center;
      this.r = r;
      this.nLeaf = nLeaf;
      this.leaves = [];
      this.finished = false;
      this.init();
    }

    Flower.prototype.addLeaf = function(leaf) {
      return this.leaves.push(leaf);
    };

    Flower.prototype.init = function() {
      var angle, i, leaf, startAngle, _i, _ref;
      startAngle = randInt(0, 360);
      angle = 360.0 / this.nLeaf;
      for (i = _i = 0, _ref = this.nLeaf; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        leaf = new Leaf(random(stretch.min, stretch.max), random(stretch.min, stretch.max), startAngle, angle, random(growth.min, growth.max), this);
        startAngle += angle;
      }
      this.initialized = true;
    };

    Flower.prototype.render = function() {
      var leaf, _i, _len, _ref, _results;
      _ref = this.leaves;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leaf = _ref[_i];
        _results.push(leaf.render());
      }
      return _results;
    };

    return Flower;

  })();

  showRandomFlowers = function(n) {
    var f, i, maxHeight, maxWidth, minHeight, minWidth, p, _i;
    minWidth = 100;
    maxWidth = Math.floor(root.canvas.width) - minWidth;
    minHeight = 100;
    maxHeight = Math.floor(root.canvas.height) - minHeight;
    for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
      p = new Vector(randInt(minWidth, maxWidth), randInt(minHeight, maxHeight));
      f = new Flower(p, randInt(radius.min, radius.max), randInt(nleaf.min, nleaf.max));
      f.render();
    }
  };

  createData = function() {
    var data, x, y, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
    data = [];
    for (y = _i = 3; _i <= 6; y = ++_i) {
      data.push(new Vector(4, y));
      data.push(new Vector(5, y));
    }
    for (y = _j = 7; _j <= 8; y = ++_j) {
      data.push(new Vector(3, y));
      data.push(new Vector(4, y));
    }
    data.push(new Vector(2, 9));
    data.push(new Vector(3, 9));
    data.push(new Vector(3, 10));
    for (x = _k = 4; _k <= 17; x = ++_k) {
      data.push(new Vector(x, 6));
      data.push(new Vector(x, 7));
    }
    for (x = _l = 5; _l <= 16; x = ++_l) {
      data.push(new Vector(x, 12));
      data.push(new Vector(x, 13));
    }
    for (y = _m = 2; _m <= 19; y = ++_m) {
      data.push(new Vector(10, y));
      data.push(new Vector(11, y));
    }
    for (x = _n = 2; _n <= 19; x = ++_n) {
      data.push(new Vector(x, 18));
      data.push(new Vector(x, 19));
    }
    for (y = _o = 3; _o <= 19; y = ++_o) {
      data.push(new Vector(25, y));
      data.push(new Vector(26, y));
    }
    for (x = _p = 25; _p <= 36; x = ++_p) {
      data.push(new Vector(x, 3));
      data.push(new Vector(x, 4));
    }
    for (y = _q = 5; _q <= 18; y = ++_q) {
      data.push(new Vector(35, y));
      data.push(new Vector(36, y));
    }
    for (x = _r = 27; _r <= 34; x = ++_r) {
      data.push(new Vector(x, 9));
      data.push(new Vector(x, 10));
    }
    for (x = _s = 27; _s <= 34; x = ++_s) {
      data.push(new Vector(x, 17));
      data.push(new Vector(x, 18));
    }
    for (y = _t = 6; _t <= 10; y = ++_t) {
      data.push(new Vector(42, y));
      data.push(new Vector(43, y));
    }
    for (y = _u = 2; _u <= 19; y = ++_u) {
      data.push(new Vector(45, y));
      data.push(new Vector(46, y));
    }
    data.push(new Vector(47, 6));
    data.push(new Vector(48, 6));
    data.push(new Vector(47, 7));
    data.push(new Vector(48, 7));
    data.push(new Vector(48, 8));
    data.push(new Vector(49, 8));
    data.push(new Vector(48, 9));
    data.push(new Vector(49, 9));
    for (x = _v = 50; _v <= 57; x = ++_v) {
      data.push(new Vector(x, 5));
      data.push(new Vector(x, 6));
    }
    for (y = _w = 7; _w <= 10; y = ++_w) {
      data.push(new Vector(56, y));
      data.push(new Vector(57, y));
    }
    for (x = _x = 49; _x <= 59; x = ++_x) {
      data.push(new Vector(x, 11));
      data.push(new Vector(x, 12));
    }
    for (y = _y = 2; _y <= 14; y = ++_y) {
      data.push(new Vector(52, y));
      data.push(new Vector(53, y));
    }
    data.push(new Vector(51, 15));
    data.push(new Vector(52, 15));
    data.push(new Vector(50, 16));
    data.push(new Vector(51, 16));
    data.push(new Vector(52, 16));
    data.push(new Vector(49, 17));
    data.push(new Vector(50, 17));
    data.push(new Vector(51, 17));
    data.push(new Vector(48, 18));
    data.push(new Vector(49, 18));
    data.push(new Vector(50, 18));
    data.push(new Vector(48, 19));
    data.push(new Vector(49, 19));
    data.push(new Vector(54, 13));
    data.push(new Vector(54, 14));
    data.push(new Vector(55, 14));
    data.push(new Vector(54, 15));
    data.push(new Vector(55, 15));
    data.push(new Vector(56, 15));
    data.push(new Vector(55, 16));
    data.push(new Vector(56, 16));
    data.push(new Vector(57, 16));
    data.push(new Vector(56, 17));
    data.push(new Vector(57, 17));
    data.push(new Vector(58, 17));
    data.push(new Vector(57, 18));
    data.push(new Vector(58, 18));
    data.push(new Vector(59, 18));
    data.push(new Vector(58, 19));
    data.push(new Vector(59, 19));
    for (x = _z = 76; _z >= 73; x = --_z) {
      data.push(new Vector(x, 2));
      data.push(new Vector(x, 3));
    }
    for (x = _aa = 72; _aa >= 64; x = --_aa) {
      data.push(new Vector(x, 3));
      data.push(new Vector(x, 4));
    }
    for (y = _ab = 5; _ab <= 8; y = ++_ab) {
      data.push(new Vector(64, y));
      data.push(new Vector(65, y));
    }
    for (x = _ac = 63; _ac <= 78; x = ++_ac) {
      data.push(new Vector(x, 9));
      data.push(new Vector(x, 10));
    }
    for (y = _ad = 6; _ad <= 18; y = ++_ad) {
      data.push(new Vector(71, y));
      data.push(new Vector(72, y));
    }
    data.push(new Vector(71, 19));
    for (x = _ae = 70; _ae >= 69; x = --_ae) {
      data.push(new Vector(x, 18));
      data.push(new Vector(x, 19));
    }
    for (x = _af = 66; _af <= 67; x = ++_af) {
      data.push(new Vector(x, 13));
    }
    for (x = _ag = 65; _ag <= 67; x = ++_ag) {
      data.push(new Vector(x, 14));
    }
    for (x = _ah = 64; _ah <= 66; x = ++_ah) {
      data.push(new Vector(x, 15));
    }
    for (x = _ai = 63; _ai <= 65; x = ++_ai) {
      data.push(new Vector(x, 16));
    }
    for (x = _aj = 63; _aj <= 64; x = ++_aj) {
      data.push(new Vector(x, 17));
    }
    for (x = _ak = 74; _ak <= 75; x = ++_ak) {
      data.push(new Vector(x, 13));
    }
    for (x = _al = 74; _al <= 76; x = ++_al) {
      data.push(new Vector(x, 14));
    }
    for (x = _am = 75; _am <= 77; x = ++_am) {
      data.push(new Vector(x, 15));
    }
    for (x = _an = 76; _an <= 78; x = ++_an) {
      data.push(new Vector(x, 16));
    }
    for (x = _ao = 77; _ao <= 78; x = ++_ao) {
      data.push(new Vector(x, 17));
    }
    return data;
  };

  root.letterData = createData();

  root.i = 0;

  modifyData = function() {
    var mult_x, mult_y, v, _i, _len, _ref;
    if (root.modified) {
      return;
    }
    mult_x = root.canvas.width / 80;
    mult_y = root.canvas.height / 40;
    _ref = root.letterData;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      v.x *= mult_x;
      v.y *= mult_y;
    }
    root.modified = true;
  };

  writeLetter = function() {
    var f, v;
    if (root.i === root.letterData.length) {
      root.i = 0;
      root.needAnimation = false;
      root.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
    } else {
      root.ctx.save();
      root.ctx.translate(0, root.canvas.height / 4);
      v = root.letterData[root.i];
      f = new Flower(v, randInt(radius.min, 7), randInt(nleaf.min, nleaf.max));
      f.render();
      root.i += 1;
      root.ctx.restore();
    }
    return setTimeout(writeLetter, 40);
  };

  showLetter = function() {
    var f, v, _i, _len, _ref;
    root.ctx.save();
    root.ctx.translate(0, root.canvas.height / 4);
    _ref = root.letterData;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      f = new Flower(v, randInt(radius.min, radius.max), randInt(nleaf.min, nleaf.max));
      f.render();
    }
    root.ctx.restore();
  };

  showBoard = function() {
    var h, v1, v2, v3, v4, v5, w;
    w = root.canvas.width;
    h = root.canvas.height;
    v1 = new Vector(w * 3 / 8, h / 8);
    v2 = new Vector(w * 5 / 8, h / 8);
    v3 = new Vector(w * 5 / 16, h / 4);
    v4 = new Vector(w * 11 / 16, h / 4);
    v1.fillCircle();
    v2.fillCircle();
    root.ctx.save();
    root.ctx.strokeStyle = commonColor.yellow;
    root.ctx.lineWidth = 5;
    root.ctx.beginPath();
    root.ctx.moveTo(v1.x, v1.y);
    root.ctx.lineTo(v3.x, v3.y);
    root.ctx.closePath();
    root.ctx.stroke();
    root.ctx.beginPath();
    root.ctx.moveTo(v2.x, v2.y);
    root.ctx.lineTo(v4.x, v4.y);
    root.ctx.closePath();
    root.ctx.stroke();
    v5 = new Vector(w / 4, h / 4);
    root.ctx.fillStyle = commonColor.darkGreen;
    root.ctx.strokeStyle = commonColor.saddleBrown;
    root.ctx.lineWidth = 10;
    root.ctx.fillRect(v5.x, v5.y, w / 2, h / 2);
    root.ctx.strokeRect(v5.x, v5.y, w / 2, h / 2);
    root.ctx.restore();
  };

  showMessage = function(msg) {
    var boardWidth, msgWidth, startX;
    clearCanvas();
    showBoard();
    root.ctx.save();
    root.ctx.fillStyle = commonColor.white;
    root.ctx.strokeStyle = commonColor.white;
    root.ctx.font = "oblique normal lighter 64px monoca monospace";
    msgWidth = root.ctx.measureText(msg).width;
    boardWidth = root.canvas.width / 2;
    startX = root.canvas.width / 4 + (boardWidth - msgWidth) / 2;
    root.ctx.strokeText(msg, startX, root.canvas.height / 2);
    root.ctx.restore();
  };

  showCake = function() {
    var c, p, r, theta, thetas, _i, _len;
    clearCanvas();
    p = new Vector(root.canvas.width / 2, root.canvas.height / 2);
    p.fillCircle(root.R, commonColor.chocolate);
    thetas = [0, 30, 45, 60, 75, 90, 100, 110, 120, 130, 140, 150, 180, 210, 220, 230, 240, 250, 260, 270, 285, 300, 315, 330];
    r = R * 0.05;
    for (_i = 0, _len = thetas.length; _i < _len; _i++) {
      theta = thetas[_i];
      c = p.getHeartCurvePoint(r, theta);
      c.fillCircle(r);
      c.fillDiamond(r / 3);
    }
  };

  step0 = function() {
    showMessage("满地鲜花为谁盛开？");
    $("#btn").html("next");
    $("#btn").click(function() {
      step1();
    });
  };

  step1 = function() {
    clearCanvas();
    showRandomFlowers(1000);
    $("#btn").click(function() {
      step2();
    });
  };

  step2 = function() {
    showMessage("精选24*24，只为祝你");
    $("#btn").click(function() {
      step3();
    });
  };

  step3 = function() {
    clearCanvas();
    modifyData();
    showLetter();
    $("#btn").click(function() {
      step4();
    });
  };

  step4 = function() {
    showMessage("送上生日蛋糕");
    $("#btn").click(function() {
      step5();
    });
  };

  step5 = function() {
    showCake();
    $("#btn").click(function() {
      step6();
    });
  };

  step6 = function() {
    showMessage("最后的总是最华丽的");
    $("#btn").click(function() {
      step7();
    });
  };

  step7 = function() {
    clearCanvas();
    modifyData();
    root.needAnimation = true;
    writeLetter();
    $("#btn").attr("disabled", "disabled");
    return $("#btn").html("thank you");
  };

  main = function() {
    modifyData();
    writeLetter();
  };

  main();

}).call(this);
