// Generated by CoffeeScript 1.3.3
(function() {
  var Board, Cake, Flower, Leaf, Vector, animateHappyBirthday, clearCanvas, commonColor, getColor, growth, main, nleaf, radius, randColor, randInt, random, root, showFlowers, showHappyBirthday, step0, step1, step2, step3, step4, step5, step6, step7, stretch, test;

  root = typeof window !== "undefined" && window !== null ? window : global;

  root.canvas = $("#canvas")[0];

  root.ctx = root.canvas.getContext("2d");

  root.canvas.width = root.innerWidth;

  root.canvas.height = root.innerHeight - 50;

  root.cakeRadius = Math.min(root.canvas.width, root.canvas.height) * 0.45;

  root.data = [];

  root.flowers = [];

  root.button = $("#btn");

  root.cake = null;

  root.i = 0;

  clearCanvas = function() {
    return root.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
  };

  random = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return Math.random() * (max - min) + min;
  };

  randInt = function(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  };

  randColor = function() {
    var a, b, g, r;
    r = randInt(0, 255);
    g = randInt(0, 255);
    b = randInt(0, 255);
    a = random();
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  getColor = function(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  stretch = {
    min: 0.3,
    max: 10.0
  };

  radius = {
    min: 3,
    max: 5
  };

  nleaf = {
    min: 3,
    max: 10
  };

  growth = {
    min: 0.1,
    max: 0.3
  };

  commonColor = {
    red: "rgb(255,0,0)",
    green: "rgb(0,255,0)",
    blue: "rgb(0,0,255)",
    black: "rgb(0,0,0)",
    white: "rgb(255,255,255)",
    yellow: "rgb(255,255,0)",
    purple: "rgb(255,0,255)",
    deepPink: "rgb(255,20,147)",
    saddleBrown: "rgb(139,69,19)",
    darkGreen: "rgb(34,139,34)",
    mintCream: "rgb(245,255,250)",
    chocolate: "rgb(210,105,30)",
    _deepPink: "rgba(255,20,147,0)",
    _mintCream: "rgba(245,255,250,0)",
    _chocolate: "rgba(210,105,30,0)"
  };

  root.initialize = function() {
    var flower, v, x, y, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _i, _j, _k, _l, _len, _m, _n, _o, _p, _q, _r, _ref, _s, _t, _u, _v, _w, _x, _y, _z;
    for (y = _i = 3; _i <= 6; y = ++_i) {
      root.data.push(new Vector(4, y));
      root.data.push(new Vector(5, y));
    }
    for (y = _j = 7; _j <= 8; y = ++_j) {
      root.data.push(new Vector(3, y));
      root.data.push(new Vector(4, y));
    }
    for (x = _k = 2; _k <= 3; x = ++_k) {
      root.data.push(new Vector(x, 9));
    }
    root.data.push(new Vector(3, 10));
    for (x = _l = 4; _l <= 17; x = ++_l) {
      root.data.push(new Vector(x, 6));
      root.data.push(new Vector(x, 7));
    }
    for (x = _m = 5; _m <= 16; x = ++_m) {
      root.data.push(new Vector(x, 12));
      root.data.push(new Vector(x, 13));
    }
    for (y = _n = 2; _n <= 19; y = ++_n) {
      root.data.push(new Vector(10, y));
      root.data.push(new Vector(11, y));
    }
    for (x = _o = 2; _o <= 19; x = ++_o) {
      root.data.push(new Vector(x, 18));
      root.data.push(new Vector(x, 19));
    }
    for (y = _p = 3; _p <= 19; y = ++_p) {
      root.data.push(new Vector(25, y));
      root.data.push(new Vector(26, y));
    }
    for (x = _q = 25; _q <= 36; x = ++_q) {
      root.data.push(new Vector(x, 3));
      root.data.push(new Vector(x, 4));
    }
    for (y = _r = 5; _r <= 18; y = ++_r) {
      root.data.push(new Vector(35, y));
      root.data.push(new Vector(36, y));
    }
    for (x = _s = 27; _s <= 34; x = ++_s) {
      root.data.push(new Vector(x, 9));
      root.data.push(new Vector(x, 10));
    }
    for (x = _t = 27; _t <= 34; x = ++_t) {
      root.data.push(new Vector(x, 17));
      root.data.push(new Vector(x, 18));
    }
    for (y = _u = 6; _u <= 10; y = ++_u) {
      root.data.push(new Vector(42, y));
      root.data.push(new Vector(43, y));
    }
    for (y = _v = 2; _v <= 19; y = ++_v) {
      root.data.push(new Vector(45, y));
      root.data.push(new Vector(46, y));
    }
    for (x = _w = 47; _w <= 48; x = ++_w) {
      root.data.push(new Vector(x, 6));
    }
    for (x = _x = 47; _x <= 48; x = ++_x) {
      root.data.push(new Vector(x, 7));
    }
    for (x = _y = 48; _y <= 49; x = ++_y) {
      root.data.push(new Vector(x, 8));
    }
    for (x = _z = 48; _z <= 49; x = ++_z) {
      root.data.push(new Vector(x, 9));
    }
    for (x = _aa = 50; _aa <= 57; x = ++_aa) {
      root.data.push(new Vector(x, 5));
      root.data.push(new Vector(x, 6));
    }
    for (y = _ab = 7; _ab <= 10; y = ++_ab) {
      root.data.push(new Vector(56, y));
      root.data.push(new Vector(57, y));
    }
    for (x = _ac = 49; _ac <= 59; x = ++_ac) {
      root.data.push(new Vector(x, 11));
      root.data.push(new Vector(x, 12));
    }
    for (y = _ad = 2; _ad <= 14; y = ++_ad) {
      root.data.push(new Vector(52, y));
      root.data.push(new Vector(53, y));
    }
    for (x = _ae = 51; _ae <= 52; x = ++_ae) {
      root.data.push(new Vector(x, 15));
    }
    for (x = _af = 50; _af <= 52; x = ++_af) {
      root.data.push(new Vector(x, 16));
    }
    for (x = _ag = 49; _ag <= 51; x = ++_ag) {
      root.data.push(new Vector(x, 17));
    }
    for (x = _ah = 48; _ah <= 50; x = ++_ah) {
      root.data.push(new Vector(x, 18));
    }
    for (x = _ai = 48; _ai <= 49; x = ++_ai) {
      root.data.push(new Vector(x, 19));
    }
    for (x = _aj = 54; _aj <= 55; x = ++_aj) {
      root.data.push(new Vector(x, 14));
    }
    for (x = _ak = 54; _ak <= 56; x = ++_ak) {
      root.data.push(new Vector(x, 15));
    }
    for (x = _al = 55; _al <= 57; x = ++_al) {
      root.data.push(new Vector(x, 16));
    }
    for (x = _am = 56; _am <= 58; x = ++_am) {
      root.data.push(new Vector(x, 17));
    }
    for (x = _an = 57; _an <= 59; x = ++_an) {
      root.data.push(new Vector(x, 18));
    }
    for (x = _ao = 58; _ao <= 59; x = ++_ao) {
      root.data.push(new Vector(x, 19));
    }
    for (x = _ap = 76; _ap >= 73; x = --_ap) {
      root.data.push(new Vector(x, 2));
      root.data.push(new Vector(x, 3));
    }
    for (x = _aq = 72; _aq >= 64; x = --_aq) {
      root.data.push(new Vector(x, 3));
      root.data.push(new Vector(x, 4));
    }
    for (y = _ar = 5; _ar <= 8; y = ++_ar) {
      root.data.push(new Vector(64, y));
      root.data.push(new Vector(65, y));
    }
    for (x = _as = 63; _as <= 78; x = ++_as) {
      root.data.push(new Vector(x, 9));
      root.data.push(new Vector(x, 10));
    }
    for (y = _at = 6; _at <= 18; y = ++_at) {
      root.data.push(new Vector(71, y));
      root.data.push(new Vector(72, y));
    }
    root.data.push(new Vector(71, 19));
    for (x = _au = 70; _au >= 69; x = --_au) {
      root.data.push(new Vector(x, 18));
      root.data.push(new Vector(x, 19));
    }
    for (x = _av = 66; _av <= 67; x = ++_av) {
      root.data.push(new Vector(x, 13));
    }
    for (x = _aw = 65; _aw <= 67; x = ++_aw) {
      root.data.push(new Vector(x, 14));
    }
    for (x = _ax = 64; _ax <= 66; x = ++_ax) {
      root.data.push(new Vector(x, 15));
    }
    for (x = _ay = 63; _ay <= 65; x = ++_ay) {
      root.data.push(new Vector(x, 16));
    }
    for (x = _az = 63; _az <= 64; x = ++_az) {
      root.data.push(new Vector(x, 17));
    }
    for (x = _ba = 74; _ba <= 75; x = ++_ba) {
      root.data.push(new Vector(x, 13));
    }
    for (x = _bb = 74; _bb <= 76; x = ++_bb) {
      root.data.push(new Vector(x, 14));
    }
    for (x = _bc = 75; _bc <= 77; x = ++_bc) {
      root.data.push(new Vector(x, 15));
    }
    for (x = _bd = 76; _bd <= 78; x = ++_bd) {
      root.data.push(new Vector(x, 16));
    }
    for (x = _be = 77; _be <= 78; x = ++_be) {
      root.data.push(new Vector(x, 17));
    }
    _ref = root.data;
    for (_bf = 0, _len = _ref.length; _bf < _len; _bf++) {
      v = _ref[_bf];
      v.x *= root.canvas.width / 80;
      v.y *= root.canvas.height / 40;
      flower = new Flower(v);
      root.flowers.push(flower);
    }
  };

  Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.mult = function(f) {
      this.x *= f;
      this.y *= f;
      return this;
    };

    Vector.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vector.prototype.rotate = function(theta) {
      var x, y;
      x = this.x;
      y = this.y;
      theta *= Math.PI / 180;
      this.x = x * Math.cos(theta) - y * Math.sin(theta);
      this.y = x * Math.sin(theta) + y * Math.cos(theta);
      return this;
    };

    Vector.prototype.set = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    Vector.prototype.clone = function() {
      return new Vector(this.x, this.y);
    };

    Vector.prototype.fillCircle = function(r, color) {
      if (r == null) {
        r = 10;
      }
      if (color == null) {
        color = commonColor.red;
      }
      root.ctx.save();
      root.ctx.translate(this.x, this.y);
      root.ctx.beginPath();
      root.ctx.arc(0, 0, r, 0, Math.PI * 2, true);
      root.ctx.closePath();
      root.ctx.fillStyle = color;
      root.ctx.fill();
      root.ctx.restore();
    };

    Vector.prototype.getHeartCurvePoint = function(r, theta) {
      var x, y;
      if (theta == null) {
        theta = 0;
      }
      theta = Math.PI / 180 * theta;
      x = this.x + r * 16 * Math.pow(Math.sin(theta), 3);
      y = this.y - r * (13 * Math.cos(theta) - 5 * Math.cos(2 * theta) - 2 * Math.cos(3 * theta) - Math.cos(4 * theta));
      return new Vector(x, y);
    };

    Vector.prototype.fillDiamond = function(r, color) {
      if (color == null) {
        color = commonColor.yellow;
      }
      root.ctx.save();
      root.ctx.translate(this.x, this.y);
      root.ctx.beginPath();
      root.ctx.moveTo(-r, 0);
      root.ctx.lineTo(0, -r);
      root.ctx.lineTo(r, 0);
      root.ctx.lineTo(0, r);
      root.ctx.closePath();
      root.ctx.fillStyle = color;
      root.ctx.fill();
      root.ctx.restore();
    };

    return Vector;

  })();

  Board = (function() {

    function Board() {
      var h, w;
      w = root.canvas.width;
      h = root.canvas.height;
      this.v1 = new Vector(w * 3 / 8, h / 8);
      this.v2 = new Vector(w * 5 / 8, h / 8);
      this.v3 = new Vector(w * 5 / 16, h / 4);
      this.v4 = new Vector(w * 11 / 16, h / 4);
      this.v5 = new Vector(w / 4, h / 4);
      this.width = w / 2;
    }

    Board.prototype.showBoard = function() {
      this.v1.fillCircle();
      this.v2.fillCircle();
      root.ctx.save();
      root.ctx.strokeStyle = commonColor.yellow;
      root.ctx.lineWidth = 5;
      root.ctx.beginPath();
      root.ctx.moveTo(this.v1.x, this.v1.y);
      root.ctx.lineTo(this.v3.x, this.v3.y);
      root.ctx.closePath();
      root.ctx.stroke();
      root.ctx.beginPath();
      root.ctx.moveTo(this.v2.x, this.v2.y);
      root.ctx.lineTo(this.v4.x, this.v4.y);
      root.ctx.closePath();
      root.ctx.stroke();
      root.ctx.fillStyle = commonColor.darkGreen;
      root.ctx.strokeStyle = commonColor.saddleBrown;
      root.ctx.lineWidth = 10;
      root.ctx.fillRect(this.v5.x, this.v5.y, root.canvas.width / 2, root.canvas.height / 2);
      root.ctx.strokeRect(this.v5.x, this.v5.y, root.canvas.width / 2, root.canvas.height / 2);
      root.ctx.restore();
    };

    Board.prototype.showMessage = function(msg) {
      var msgWidth, startX;
      clearCanvas();
      this.showBoard();
      root.ctx.save();
      root.ctx.fillStyle = commonColor.white;
      root.ctx.strokeStyle = commonColor.white;
      root.ctx.font = "oblique normal lighter 64px monoca monospace";
      msgWidth = root.ctx.measureText(msg).width;
      startX = root.canvas.width / 4 + (this.width - msgWidth) / 2;
      root.ctx.strokeText(msg, startX, root.canvas.height / 2);
      root.ctx.restore();
    };

    return Board;

  })();

  root.board = new Board();

  Cake = (function() {

    function Cake() {
      var r, theta, thetas, _i, _len;
      this.center = new Vector(root.canvas.width / 2, root.canvas.height / 2);
      thetas = [0, 30, 45, 60, 75, 90, 100, 110, 120, 130, 140, 150, 180, 210, 220, 230, 240, 250, 260, 270, 285, 300, 315, 330];
      this.candles = [];
      r = root.cakeRadius / 20;
      for (_i = 0, _len = thetas.length; _i < _len; _i++) {
        theta = thetas[_i];
        this.candles.push(this.center.getHeartCurvePoint(r, theta));
      }
    }

    Cake.prototype.render = function() {
      var candle, r, _i, _len, _ref;
      clearCanvas();
      r = root.cakeRadius / 20;
      this.center.fillCircle(root.cakeRadius, commonColor.chocolate);
      _ref = this.candles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        candle = _ref[_i];
        candle.fillCircle(r);
        candle.fillDiamond(r / 3);
      }
    };

    return Cake;

  })();

  root.cake = new Cake();

  Leaf = (function() {

    function Leaf(s1, s2, startAngle, angle, growth, flower) {
      this.s1 = s1;
      this.s2 = s2;
      this.startAngle = startAngle;
      this.angle = angle;
      this.r = 1;
      this.growth = growth;
      this.flower = flower;
      this.color = randColor();
    }

    Leaf.prototype.randomize = function(startAngle) {
      this.s1 = random(stretch.min, stretch.max);
      this.s2 = random(stretch.min, stretch.max);
      this.growth = random(growth.min, growth.max);
      this.startAngle = startAngle;
      this.color = randColor();
    };

    Leaf.prototype.draw = function() {
      var v1, v2, v3, v4;
      v1 = new Vector(this.r, 0).rotate(this.startAngle);
      v2 = v1.clone().rotate(this.angle);
      v3 = v1.clone().mult(this.s1);
      v4 = v2.clone().mult(this.s2);
      root.ctx.save();
      root.ctx.translate(this.flower.center.x, this.flower.center.y);
      root.ctx.strokeStyle = this.color;
      root.ctx.beginPath();
      root.ctx.moveTo(v1.x, v1.y);
      root.ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);
      root.ctx.closePath();
      root.ctx.stroke();
      root.ctx.restore();
    };

    Leaf.prototype.render = function() {
      var r;
      r = this.r;
      while (this.r <= this.flower.r) {
        this.draw();
        this.r += this.growth;
      }
      this.r = r;
    };

    return Leaf;

  })();

  Flower = (function() {

    function Flower(center) {
      this.center = center;
      this.r = randInt(radius.min, radius.max);
      this.nLeaf = randInt(nleaf.min, nleaf.max);
      this.leaves = [];
      this.initialize();
    }

    Flower.prototype.addLeaf = function(leaf) {
      return this.leaves.push(leaf);
    };

    Flower.prototype.initialize = function() {
      var angle, i, leaf, startAngle, _i, _ref;
      startAngle = randInt(0, 360);
      angle = 360.0 / this.nLeaf;
      for (i = _i = 0, _ref = this.nLeaf; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        leaf = new Leaf(random(stretch.min, stretch.max), random(stretch.min, stretch.max), startAngle, angle, random(growth.min, growth.max), this);
        this.addLeaf(leaf);
        startAngle += angle;
      }
    };

    Flower.prototype.randomize = function() {
      var angle, i, startAngle, _i, _ref;
      startAngle = randInt(0, 360);
      angle = 360.0 / this.nLeaf;
      for (i = _i = 0, _ref = this.nLeaf; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.leaves[i].randomize(startAngle);
        startAngle += angle;
      }
      this.r = randInt(radius.min, radius.max);
    };

    Flower.prototype.render = function() {
      var leaf, _i, _len, _ref;
      _ref = this.leaves;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leaf = _ref[_i];
        leaf.render();
      }
    };

    return Flower;

  })();

  showFlowers = function(n) {
    var flower, i, v, x, y, _i;
    if (n == null) {
      n = 1000;
    }
    clearCanvas();
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      x = randInt(0, root.canvas.width);
      y = randInt(0, root.canvas.height);
      v = new Vector(x, y);
      flower = new Flower(v);
      flower.render();
    }
  };

  showHappyBirthday = function() {
    var flower, _i, _len, _ref;
    clearCanvas();
    root.ctx.save();
    root.ctx.translate(0, root.canvas.height / 4);
    _ref = root.flowers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      flower = _ref[_i];
      flower.randomize();
      flower.render();
    }
    root.ctx.restore();
  };

  animateHappyBirthday = function() {
    var flower;
    if (root.i === root.flowers.length) {
      root.i = 0;
      root.ctx.clearRect(0, 0, root.canvas.width, root.canvas.height);
    } else {
      root.ctx.save();
      root.ctx.translate(0, root.canvas.height / 4);
      flower = root.flowers[root.i];
      flower.randomize();
      flower.render();
      root.i += 1;
      root.ctx.restore();
    }
    return setTimeout(animateHappyBirthday, 40);
  };

  step0 = function() {
    root.board.showMessage("满地鲜花为谁盛开？");
    root.button.html("Next");
    root.button.bind("click", function() {
      step1();
    });
  };

  step1 = function() {
    showFlowers(999);
    root.button.bind("click", function() {
      step2();
    });
  };

  step2 = function() {
    root.board.showMessage("精选24*24，只为祝你");
    root.button.bind("click", function() {
      step3();
    });
  };

  step3 = function() {
    showHappyBirthday();
    root.button.bind("click", function() {
      step4();
    });
  };

  step4 = function() {
    root.board.showMessage("送上生日蛋糕");
    root.button.bind("click", function() {
      step5();
    });
  };

  step5 = function() {
    root.cake.render();
    root.button.bind("click", function() {
      step6();
    });
  };

  step6 = function() {
    root.board.showMessage("最后的总是最华丽的");
    root.button.bind("click", function() {
      step7();
    });
  };

  step7 = function() {
    clearCanvas();
    animateHappyBirthday();
    root.button.html("Happy Birthday");
    return root.button.attr("disabled", "disabled");
  };

  main = function() {
    root.initialize();
    root.board.showMessage("点击底部的Start按钮开始");
    root.button.bind("click", function() {
      step0();
    });
  };

  test = function() {
    root.initialize();
    root.cake.render();
  };

  test();

}).call(this);
