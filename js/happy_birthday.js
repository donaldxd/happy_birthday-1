// Generated by CoffeeScript 1.3.3
(function() {
  var Color, Pen, fire, main, n, palCol, root;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.canvas = $("#canvas")[0];

  console.log(root.canvas);

  root.canvas.width = root.innerWidth;

  root.canvas.height = root.innerHeight;

  root.ctx = root.canvas.getContext("2d");

  root.R = Math.min(root.innerWidth, root.innerHeight) * 0.45;

  root.onFire = false;

  palCol = function(intensity) {
    var b, g, r;
    r = Math.min(intensity, 85) * 3;
    intensity = Math.max(intensity - 85, 0);
    g = Math.min(intensity, 85) * 3;
    intensity = Math.max(intensity - 85, 0);
    b = Math.min(intensity, 85) * 3;
    return [r, g, b];
  };

  root.palette = (function() {
    var _i, _results;
    _results = [];
    for (n = _i = 0; _i <= 255; n = ++_i) {
      _results.push(palCol(n));
    }
    return _results;
  })();

  Color = (function() {

    function Color(r, g, b) {
      if (r == null) {
        r = 0;
      }
      if (g == null) {
        g = 0;
      }
      if (b == null) {
        b = 0;
      }
      this.r = r;
      this.g = g;
      this.b = b;
    }

    Color.prototype.color = function() {
      return "rgb(" + this.r + "," + this.g + "," + this.b + ")";
    };

    Color.redColor = "rgb(255,0,0)";

    Color.greenColor = "rgb(0,255,0)";

    Color.blueColor = "rgb(0,0,255)";

    Color.blackColor = "rgb(0,0,0)";

    Color.whiteColor = "rgb(255,255,255)";

    Color.yellowColor = "rgb(255,255,0)";

    return Color;

  })();

  Pen = (function() {

    function Pen(x, y, fillColor, strokeColor) {
      if (x == null) {
        x = root.canvas.width / 2;
      }
      if (y == null) {
        y = root.canvas.height / 2;
      }
      if (fillColor == null) {
        fillColor = Color.redColor;
      }
      if (strokeColor == null) {
        strokeColor = Color.greenColor;
      }
      this.x = x;
      this.y = y;
      this.ctx = root.ctx;
      this.ctx.fillStyle = fillColor;
      this.ctx.strokeStyle = strokeColor;
    }

    Pen.prototype.setX = function(x) {
      return this.x = x;
    };

    Pen.prototype.setY = function(y) {
      return this.y = y;
    };

    Pen.prototype.setXY = function(x, y) {
      this.x = x;
      return this.y = y;
    };

    Pen.prototype.log = function() {
      return console.log("point: (" + this.x + ", " + this.y + ")");
    };

    Pen.prototype.strokeCircle = function(r, color) {
      if (color == null) {
        color = "";
      }
      if (color === "") {
        color = this.ctx.strokeStyle;
      }
      this.ctx.save();
      this.ctx.strokeStyle = color;
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, r, 0, Math.PI * 2, true);
      this.ctx.closePath();
      this.ctx.stroke();
      this.ctx.restore();
    };

    Pen.prototype.fillCircle = function(r) {
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, r, 0, Math.PI * 2, true);
      this.ctx.closePath();
      this.ctx.stroke();
      this.ctx.fill();
    };

    Pen.prototype.getHeartCurvePoint = function(r, theta) {
      var x, y;
      if (theta == null) {
        theta = 0;
      }
      theta = Math.PI / 180 * theta;
      x = this.x + r * 16 * Math.pow(Math.sin(theta), 3);
      y = this.y - r * (13 * Math.cos(theta) - 5 * Math.cos(2 * theta) - 2 * Math.cos(3 * theta) - Math.cos(4 * theta));
      return new Pen(x, y);
    };

    Pen.prototype.fillDiamond = function(w, h, r) {
      if (r == null) {
        r = 0;
      }
      this.ctx.save();
      this.ctx.fillStyle = Color.yellowColor;
      this.ctx.beginPath();
      this.ctx.moveTo(this.x, this.y - r);
      this.ctx.lineTo(this.x - w, this.y - h - r);
      this.ctx.lineTo(this.x, this.y - 2 * h - r);
      this.ctx.lineTo(this.x + w, this.y - h - r);
      this.ctx.closePath();
      this.ctx.fill();
      this.ctx.restore();
    };

    Pen.prototype.fire = function() {
      var _this = this;
      this.imageData = this.ctx.getImageData(0, 0, 20, 20);
      this.data = this.imageData.data;
      console.log(this.data);
      this.buf = [[]];
      this.emit = [[]];
      return setInterval(function() {
        var col, index, x, y, _base, _i, _j, _k, _ref, _ref1;
        for (n = _i = 0; _i <= 100; n = ++_i) {
          _this.buf[0][Math.round() * 19] = Math.round(Math.random() * 5000) + 750;
        }
        for (x = _j = 0; _j <= 19; x = ++_j) {
          for (y = _k = 1; _k <= 19; y = ++_k) {
            (_base = _this.buf)[y] || (_base[y] = []);
            _this.buf[y][x] = ((_this.buf[y - 1][x - 1] || 0) + (_this.buf[y - 1][x] || 0) + (_this.buf[y - 1][x + 1] || 0) + (((_ref = _this.buf[y - 2]) != null ? _ref[x] : void 0) || 0)) / (4 + 0.3);
            if ((_ref1 = _this.emit[y]) != null ? _ref1[x] : void 0) {
              _this.buf[y][x] = _this.emit[y][x];
              _this.emit[y][x] -= 200;
              if (_this.emit[y][x] <= 0) {
                _this.emit[y][x] = null;
              }
            }
            col = Math.round(_this.buf[y][x] / 5000 * 255) & 0xff;
            index = ((20 - y) * 20 + x) * 4;
            _this.data[index] = root.palette[col][0];
            _this.data[++index] = root.palette[col][1];
            _this.data[++index] = root.palette[col][2];
            _this.data[++index] = 255;
          }
        }
        return _this.ctx.putImageData(_this.imageData, _this.x, _this.y);
      }, 1000);
    };

    Pen.prototype.drawFire = function(x, y) {
      var xx, yy, _i, _ref, _results;
      _results = [];
      for (yy = _i = y, _ref = y + 3; y <= _ref ? _i <= _ref : _i >= _ref; yy = y <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _name, _ref1, _ref2, _results1;
          _results1 = [];
          for (xx = _j = _ref1 = x - 3, _ref2 = x + 3; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; xx = _ref1 <= _ref2 ? ++_j : --_j) {
            emit[_name = 20 - yy] || (emit[_name] = []);
            _results1.push(emit[20 - yy][xx] || 4500);
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Pen;

  })();

  main = function() {
    var R, p, pen, r, theta, thetas, _color, _i, _len;
    pen = new Pen();
    R = root.R;
    console.log(R);
    r = R * 0.05;
    _color = new Color(255, 255, 0);
    pen.strokeCircle(R, _color.color());
    thetas = [0, 30, 45, 60, 75, 90, 100, 110, 120, 130, 140, 150, 180, 210, 220, 230, 240, 250, 260, 270, 285, 300, 315, 330];
    for (_i = 0, _len = thetas.length; _i < _len; _i++) {
      theta = thetas[_i];
      p = pen.getHeartCurvePoint(r, theta);
      p.fillCircle(r);
      p.fillDiamond(r, r);
    }
    return console.log(root.palette);
  };

  fire = function() {
    var pen;
    pen = new Pen();
    return pen.fire();
  };

  fire();

}).call(this);
